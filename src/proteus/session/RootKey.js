/*
 * Wire
 * Copyright (C) 2016 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */

'use strict';

var CBOR, ChainKey, CipherKey, ClassUtil, DerivedSecrets, DontCallConstructor, KeyPair, PublicKey,
    RootKey, TypeUtil;

CBOR = require('wire-webapp-cbor');
DontCallConstructor = require('../errors/DontCallConstructor');
ClassUtil = require('../util/ClassUtil');
TypeUtil = require('../util/TypeUtil');
PublicKey = require('../keys/PublicKey');
KeyPair = require('../keys/KeyPair');
DerivedSecrets = require('../derived/DerivedSecrets');
CipherKey = require('../derived/CipherKey');
ChainKey = require('./ChainKey');

module.exports = RootKey = (function() {
  function RootKey() {
    throw new DontCallConstructor(this);
  }


  /*
   * @param key [Proteus.derived.CipherKey] Cipher key generated by derived secrets
   */

  RootKey.from_cipher_key = function(cipher_key) {
    var rk;
    TypeUtil.assert_is_instance(CipherKey, cipher_key);
    rk = ClassUtil.new_instance(RootKey);
    rk.key = cipher_key;
    return rk;
  };


  /*
   * @param ours [KeyPair] Our key pair
   * @param theirs [PublicKey] Their public key
   */

  RootKey.prototype.dh_ratchet = function(ours, theirs) {
    var dsecs, secret;
    TypeUtil.assert_is_instance(KeyPair, ours);
    TypeUtil.assert_is_instance(PublicKey, theirs);
    secret = ours.secret_key.shared_secret(theirs);
    dsecs = DerivedSecrets.kdf(secret, this.key.key, 'dh_ratchet');
    return [RootKey.from_cipher_key(dsecs.cipher_key), ChainKey.from_mac_key(dsecs.mac_key, 0)];
  };

  RootKey.prototype.encode = function(e) {
    e.object(1);
    e.u8(0);
    return this.key.encode(e);
  };

  RootKey.decode = function(d) {
    var cipher_key, i, nprops, ref;
    TypeUtil.assert_is_instance(CBOR.Decoder, d);
    cipher_key = null;
    nprops = d.object();
    for (i = 0, ref = nprops - 1; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
      switch (d.u8()) {
        case 0:
          cipher_key = CipherKey.decode(d);
          break;
        default:
          d.skip();
      }
    }
    return RootKey.from_cipher_key(cipher_key);
  };

  return RootKey;

})();
