/*
 * Wire
 * Copyright (C) 2016 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */

'use strict';

const CBOR = require('wire-webapp-cbor');

const DontCallConstructor = require('../errors/DontCallConstructor');
const ClassUtil = require('../util/ClassUtil');
const TypeUtil = require('../util/TypeUtil');

const PublicKey = require('../keys/PublicKey');
const KeyPair = require('../keys/KeyPair');

const DerivedSecrets = require('../derived/DerivedSecrets');
const CipherKey = require('../derived/CipherKey');

const ChainKey = require('./ChainKey');

module.exports = class RootKey {
  constructor () {
    throw new DontCallConstructor(this);
  }

  /*
   * @param key [Proteus.derived.CipherKey] Cipher key generated by derived secrets
   */
  static from_cipher_key (cipher_key) {
    TypeUtil.assert_is_instance(CipherKey, cipher_key);

    const rk = ClassUtil.new_instance(RootKey);
    rk.key = cipher_key;
    return rk;
  }

  /*
   * @param ours [KeyPair] Our key pair
   * @param theirs [PublicKey] Their public key
   */
  dh_ratchet (ours, theirs) {
    TypeUtil.assert_is_instance(KeyPair, ours);
    TypeUtil.assert_is_instance(PublicKey, theirs);

    const secret = ours.secret_key.shared_secret(theirs);
    const dsecs = DerivedSecrets.kdf(secret, this.key.key, 'dh_ratchet');

    return [
      RootKey.from_cipher_key(dsecs.cipher_key),
      ChainKey.from_mac_key(dsecs.mac_key, 0)
    ];
  }

  encode (e) {
    e.object(1);
    e.u8(0);
    return this.key.encode(e);
  }

  static decode (d) {
    TypeUtil.assert_is_instance(CBOR.Decoder, d);

    let cipher_key = null;

    const nprops = d.object();
    for (let i = 0, ref = nprops - 1; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
      switch (d.u8()) {
        case 0:
          cipher_key = CipherKey.decode(d);
          break;
        default:
          d.skip();
      }
    }
    return RootKey.from_cipher_key(cipher_key);
  }
};
