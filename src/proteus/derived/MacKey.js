/*
 * Wire
 * Copyright (C) 2016 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */

'use strict';

var CBOR, ClassUtil, DontCallConstructor, MacKey, TypeUtil, sodium;

CBOR = require('wire-webapp-cbor');

sodium = require('libsodium');

DontCallConstructor = require('../errors/DontCallConstructor');

ClassUtil = require('../util/ClassUtil');

TypeUtil = require('../util/TypeUtil');

module.exports = MacKey = (function() {
  function MacKey() {
    throw new DontCallConstructor(this);
  }


  /*
   * key: mac::Key
   * @param key [Uint8Array] Mac Key in byte array format generated by derived secrets
   */

  MacKey.new = function(key) {
    var mk;
    TypeUtil.assert_is_instance(Uint8Array, key);
    mk = ClassUtil.new_instance(MacKey);
    mk.key = key;
    return mk;
  };

  // Hash-based message authentication code
  MacKey.prototype.sign = function(msg) {
    return sodium.crypto_auth_hmacsha256(msg, this.key);
  };

  MacKey.prototype.verify = function(signature, msg) {
    return sodium.crypto_auth_hmacsha256_verify(signature, msg, this.key);
  };

  MacKey.prototype.encode = function(e) {
    e.object(1);
    e.u8(0);
    return e.bytes(this.key);
  };

  MacKey.decode = function(d) {
    var i, key_bytes, nprops, ref;
    TypeUtil.assert_is_instance(CBOR.Decoder, d);
    key_bytes = null;
    nprops = d.object();
    for (i = 0, ref = nprops - 1; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
      switch (d.u8()) {
        case 0:
          key_bytes = new Uint8Array(d.bytes());
          break;
        default:
          d.skip();
      }
    }
    return MacKey.new(key_bytes);
  };

  return MacKey;

})();
